/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, World } from "@latticexyz/recs";

export function defineContractComponents(world: World) {
  return {
    Hooks: (() => {
      const keySchema = { key: "bytes32" } as const;
      const valueSchema = { value: "address[]" } as const;
      return defineComponent(
        world,
        {
          value: RecsType.StringArray,
        },
        {
          id: "0x6d756473746f72650000000000000000486f6f6b730000000000000000000000",
          metadata: {
            componentId: "0x6d756473746f72650000000000000000486f6f6b730000000000000000000000",
            tableId: "TableId<mudstore:Hooks>",
            keySchema,
            valueSchema,
          },
        }
      );
    })(),
    Callbacks: (() => {
      const keySchema = { key: "bytes32" } as const;
      const valueSchema = { value: "bytes24[]" } as const;
      return defineComponent(
        world,
        {
          value: RecsType.StringArray,
        },
        {
          id: "0x6d756473746f7265000000000000000043616c6c6261636b7300000000000000",
          metadata: {
            componentId: "0x6d756473746f7265000000000000000043616c6c6261636b7300000000000000",
            tableId: "TableId<mudstore:Callbacks>",
            keySchema,
            valueSchema,
          },
        }
      );
    })(),
    StoreMetadata: (() => {
      const keySchema = { tableId: "bytes32" } as const;
      const valueSchema = {
        tableName: "string",
        abiEncodedFieldNames: "bytes",
      } as const;
      return defineComponent(
        world,
        {
          tableName: RecsType.String,
          abiEncodedFieldNames: RecsType.String,
        },
        {
          id: "0x6d756473746f7265000000000000000053746f72654d65746164617461000000",
          metadata: {
            componentId: "0x6d756473746f7265000000000000000053746f72654d65746164617461000000",
            tableId: "TableId<mudstore:StoreMetadata>",
            keySchema,
            valueSchema,
          },
        }
      );
    })(),
    Mixed: (() => {
      const keySchema = { key: "bytes32" } as const;
      const valueSchema = {
        u32: "uint32",
        u128: "uint128",
        a32: "uint32[]",
        s: "string",
      } as const;
      return defineComponent(
        world,
        {
          u32: RecsType.Number,
          u128: RecsType.BigInt,
          a32: RecsType.NumberArray,
          s: RecsType.String,
        },
        {
          id: "0x6d756473746f726500000000000000004d697865640000000000000000000000",
          metadata: {
            componentId: "0x6d756473746f726500000000000000004d697865640000000000000000000000",
            tableId: "TableId<mudstore:Mixed>",
            keySchema,
            valueSchema,
          },
        }
      );
    })(),
    Vector2: (() => {
      const keySchema = { key: "bytes32" } as const;
      const valueSchema = { x: "uint32", y: "uint32" } as const;
      return defineComponent(
        world,
        {
          x: RecsType.Number,
          y: RecsType.Number,
        },
        {
          id: "0x6d756473746f72650000000000000000566563746f7232000000000000000000",
          metadata: {
            componentId: "0x6d756473746f72650000000000000000566563746f7232000000000000000000",
            tableId: "TableId<mudstore:Vector2>",
            keySchema,
            valueSchema,
          },
        }
      );
    })(),
    KeyEncoding: (() => {
      const keySchema = {
        k1: "uint256",
        k2: "int32",
        k3: "bytes16",
        k4: "address",
        k5: "bool",
        k6: "uint8",
      } as const;
      const valueSchema = { value: "bool" } as const;
      return defineComponent(
        world,
        {
          value: RecsType.Boolean,
        },
        {
          id: "0x6d756473746f726500000000000000004b6579456e636f64696e670000000000",
          metadata: {
            componentId: "0x6d756473746f726500000000000000004b6579456e636f64696e670000000000",
            tableId: "TableId<mudstore:KeyEncoding>",
            keySchema,
            valueSchema,
          },
        }
      );
    })(),
  };
}
